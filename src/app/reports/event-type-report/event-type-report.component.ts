import { Component, OnInit } from '@angular/core';
import jsPDF from 'jspdf';
import pdfMake from 'pdfmake/build/pdfmake';
import pdfFonts from 'pdfmake/build/vfs_fonts';
import { TDocumentDefinitions } from 'pdfmake/interfaces';

@Component({
  selector: 'app-event-type-report',
  templateUrl: './event-type-report.component.html',
  styleUrls: ['./event-type-report.component.scss']
})
export class EventTypeReportComponent implements OnInit {
  events: any[] = [];
  filteredEvents: any[] = [];
  startDate: string | null = null;
  endDate: string | null = null;

  constructor() {
    (window as any).pdfMake.vfs = pdfFonts.pdfMake.vfs;
  }

  ngOnInit() {
    this.generateRandomEvent();
    this.filteredEvents = this.events;
  }

  generateRandomEvent() {
    const randomEvent = {
      EventID: Math.floor(Math.random() * 10000),
      EventDate: new Date().toISOString().split('T')[0], // Store date as YYYY-MM-DD
      EventPrice: (Math.random() * 100).toFixed(2),
      EventTypeID: Math.floor(Math.random() * 10),
      EventDescription: 'Sample Event Description ' + Math.floor(Math.random() * 100)
    };
  
    // Handle null value for localStorage
    const storedEvents = JSON.parse(localStorage.getItem('events') || '[]') || [];
    storedEvents.push(randomEvent);
    localStorage.setItem('events', JSON.stringify(storedEvents));
  
    this.events = storedEvents;
  }
  
  onDateChange() {
    if (this.startDate && this.endDate) {
      this.filteredEvents = this.events.filter(event => {
        // Type assertion to assure TypeScript that these are not null
        const start = this.startDate as string;
        const end = this.endDate as string;
        return event.EventDate >= start && event.EventDate <= end;
      });
    } else {
      this.filteredEvents = this.events;
    }
  }

  
  
  

  generatePDF() {
    const dateGenerated = new Date().toLocaleString();
    const generatedBy = 'John Doe';

    const docDefinition: TDocumentDefinitions = {
      content: [
        {
          text: 'Event Report',
          style: 'title'
        },
        {
          text: `Date Generated: ${dateGenerated}\nGenerated By: ${generatedBy}`,
          style: 'headerRight',
          margin: [0, 10, 0, 10]
        },
        {
          table: {
            headerRows: 1,
            widths: ['*', '*', '*', '*', '*'],
            body: [
              ['Event ID', 'Event Date', 'Event Price', 'Event Type ID', 'Event Description'].map(header => ({ text: header, style: 'header' })),
              ...this.filteredEvents.map(event => [
                { text: event.EventID, style: 'cell' },
                { text: event.EventDate, style: 'cell' },
                { text: event.EventPrice, style: 'cell' },
                { text: event.EventTypeID, style: 'cell' },
                { text: event.EventDescription, style: 'cell' }
              ])
            ]
          },
          layout: 'striped'
        }
      ],
      footer: function (currentPage, pageCount) {
        return {
          columns: [
            {
              text: `Page ${currentPage} of ${pageCount}`,
              alignment: 'center'
            }
          ],
          margin: [0, 10, 0, 0]
        };
      },
      styles: {
        title: {
          fontSize: 18,
          bold: true,
          alignment: 'center',
          margin: [0, 20, 0, 20]
        },
        header: {
          bold: true,
          fontSize: 13,
          color: '#33331a'
        },
        cell: {
          margin: [0, 5, 0, 5]
        },
        headerRight: {
          fontSize: 10,
          margin: [0, 0, 10, 0]
        }
      }
    };

    pdfMake.createPdf(docDefinition).open();
  }
}
