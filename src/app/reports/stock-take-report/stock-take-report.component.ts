import { Component, OnInit } from '@angular/core';
import pdfMake from 'pdfmake/build/pdfmake';
import pdfFonts from 'pdfmake/build/vfs_fonts';
import { TDocumentDefinitions } from 'pdfmake/interfaces';

@Component({
  selector: 'app-stock-take-report',
  templateUrl: './stock-take-report.component.html',
  styleUrls: ['./stock-take-report.component.scss']
})
export class StockTakeReportComponent implements OnInit {
  stockItems: any[] = [];

  constructor() {
    (window as any).pdfMake.vfs = pdfFonts.pdfMake.vfs;
  }

  ngOnInit() {
    this.loadStockItems();
  }

  loadStockItems() {
    const storedStockItems = JSON.parse(localStorage.getItem('stockItems') || '[]');

    if (storedStockItems.length === 0) {
      // If no stock items exist in localStorage, generate random ones
      for (let i = 0; i < 5; i++) {
        this.generateRandomStockItems();
      }
    } else {
      // Load the stored stock items
      this.stockItems = storedStockItems;
    }
  }

  generateRandomStockItems() {
    const randomStockItem = {
      InventoryID: Math.floor(Math.random() * 10000),
      Inventory_Name: 'Sample Item ' + Math.floor(Math.random() * 100),
      Minimum_Stock: Math.floor(Math.random() * 50),
      Maximum_Stock: Math.floor(Math.random() * 100),
      Condition: 'Good',
      Inventory_Status: 'Available',
      InventoryTypeID: Math.floor(Math.random() * 10),
      InspectionItemID: Math.floor(Math.random() * 10),
      RoomID: Math.floor(Math.random() * 100),
      Inventory_Category: 'Category ' + Math.floor(Math.random() * 10),
      StockTakeID: Math.floor(Math.random() * 10000)
    };

    this.stockItems.push(randomStockItem);
    localStorage.setItem('stockItems', JSON.stringify(this.stockItems));
  }

  generatePDF() {
    const dateGenerated = new Date().toLocaleString();
    const generatedBy = 'John Doe';

    const docDefinition: TDocumentDefinitions = {
      content: [
        {
          text: 'Stock Take Report',
          style: 'title'
        },
        {
          text: `Date Generated: ${dateGenerated}\nGenerated By: ${generatedBy}`,
          style: 'headerRight',
          margin: [0, 10, 0, 10]
        },
        {
          table: {
            headerRows: 1,
            widths: ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
            body: [
              ['Inventory ID', 'Inventory Name', 'Min Stock', 'Max Stock', 'Condition', 'Status', 'Type ID', 'Inspection ID', 'Room ID', 'Category ID', 'StockTake ID'].map(header => ({ text: header, style: 'header' })),
              ...this.stockItems.map(item => [
                { text: item.InventoryID, style: 'cell' },
                { text: item.Inventory_Name, style: 'cell' },
                { text: item.Minimum_Stock, style: 'cell' },
                { text: item.Maximum_Stock, style: 'cell' },
                { text: item.Condition, style: 'cell' },
                { text: item.Inventory_Status, style: 'cell' },
                { text: item.InventoryTypeID, style: 'cell' },
                { text: item.InspectionItemID, style: 'cell' },
                { text: item.RoomID, style: 'cell' },
                { text: item.Inventory_Category, style: 'cell' },
                { text: item.StockTakeID, style: 'cell' }
              ])
            ]
          },
          layout: 'striped'
        }
      ],
      footer: function (currentPage, pageCount) {
        return {
          columns: [
            {
              text: `Page ${currentPage} of ${pageCount}`,
              alignment: 'center'
            }
          ],
          margin: [0, 10, 0, 0]
        };
      },
      styles: {
        title: {
          fontSize: 18,
          bold: true,
          alignment: 'center',
          margin: [0, 20, 0, 20]
        },
        header: {
          bold: true,
          fontSize: 13,
          color: '#33331a'
        },
        cell: {
          margin: [0, 5, 0, 5]
        },
        headerRight: {
          fontSize: 10,
          margin: [0, 0, 10, 0]
        }
      }
    };

    pdfMake.createPdf(docDefinition).open();
  }
}
